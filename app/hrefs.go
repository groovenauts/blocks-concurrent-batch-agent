// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application Resource Href Factories
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package app

import (
	"fmt"
	"strings"
)

// InstanceGroupHref returns the resource href.
func InstanceGroupHref(orgID, name interface{}) string {
	paramorgID := strings.TrimLeftFunc(fmt.Sprintf("%v", orgID), func(r rune) bool { return r == '/' })
	paramname := strings.TrimLeftFunc(fmt.Sprintf("%v", name), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/orgs/%v/instance_groups/%v", paramorgID, paramname)
}

// PipelineHref returns the resource href.
func PipelineHref(orgID, name interface{}) string {
	paramorgID := strings.TrimLeftFunc(fmt.Sprintf("%v", orgID), func(r rune) bool { return r == '/' })
	paramname := strings.TrimLeftFunc(fmt.Sprintf("%v", name), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/orgs/%v/pipelines/%v", paramorgID, paramname)
}

// PipelineBaseHref returns the resource href.
func PipelineBaseHref(orgID, name interface{}) string {
	paramorgID := strings.TrimLeftFunc(fmt.Sprintf("%v", orgID), func(r rune) bool { return r == '/' })
	paramname := strings.TrimLeftFunc(fmt.Sprintf("%v", name), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/orgs/%v/pipeline_bases/%v", paramorgID, paramname)
}

// PipelineJobHref returns the resource href.
func PipelineJobHref(orgID, name, id interface{}) string {
	paramorgID := strings.TrimLeftFunc(fmt.Sprintf("%v", orgID), func(r rune) bool { return r == '/' })
	paramname := strings.TrimLeftFunc(fmt.Sprintf("%v", name), func(r rune) bool { return r == '/' })
	paramid := strings.TrimLeftFunc(fmt.Sprintf("%v", id), func(r rune) bool { return r == '/' })
	return fmt.Sprintf("/orgs/%v/pipelines/%v/jobs/%v", paramorgID, paramname, paramid)
}

// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// InstanceGroupConstructionTaskController is the controller interface for the InstanceGroupConstructionTask actions.
type InstanceGroupConstructionTaskController interface {
	goa.Muxer
	Start(*StartInstanceGroupConstructionTaskContext) error
	Watch(*WatchInstanceGroupConstructionTaskContext) error
}

// MountInstanceGroupConstructionTaskController "mounts" a InstanceGroupConstructionTask resource controller on the given service.
func MountInstanceGroupConstructionTaskController(service *goa.Service, ctrl InstanceGroupConstructionTaskController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/construction_tasks", ctrl.MuxHandler("preflight", handleInstanceGroupConstructionTaskOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/construction_tasks/:id", ctrl.MuxHandler("preflight", handleInstanceGroupConstructionTaskOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartInstanceGroupConstructionTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleInstanceGroupConstructionTaskOrigin(h)
	service.Mux.Handle("POST", "/construction_tasks", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "InstanceGroupConstructionTask", "action", "Start", "route", "POST /construction_tasks", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWatchInstanceGroupConstructionTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Watch(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleInstanceGroupConstructionTaskOrigin(h)
	service.Mux.Handle("PUT", "/construction_tasks/:id", ctrl.MuxHandler("watch", h, nil))
	service.LogInfo("mount", "ctrl", "InstanceGroupConstructionTask", "action", "Watch", "route", "PUT /construction_tasks/:id", "security", "api_key")
}

// handleInstanceGroupConstructionTaskOrigin applies the CORS response headers corresponding to the origin.
func handleInstanceGroupConstructionTaskOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// InstanceGroupDestructionTaskController is the controller interface for the InstanceGroupDestructionTask actions.
type InstanceGroupDestructionTaskController interface {
	goa.Muxer
	Start(*StartInstanceGroupDestructionTaskContext) error
	Watch(*WatchInstanceGroupDestructionTaskContext) error
}

// MountInstanceGroupDestructionTaskController "mounts" a InstanceGroupDestructionTask resource controller on the given service.
func MountInstanceGroupDestructionTaskController(service *goa.Service, ctrl InstanceGroupDestructionTaskController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/destruction_tasks", ctrl.MuxHandler("preflight", handleInstanceGroupDestructionTaskOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/destruction_tasks/:id", ctrl.MuxHandler("preflight", handleInstanceGroupDestructionTaskOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartInstanceGroupDestructionTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleInstanceGroupDestructionTaskOrigin(h)
	service.Mux.Handle("POST", "/destruction_tasks", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "InstanceGroupDestructionTask", "action", "Start", "route", "POST /destruction_tasks", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWatchInstanceGroupDestructionTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Watch(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleInstanceGroupDestructionTaskOrigin(h)
	service.Mux.Handle("PUT", "/destruction_tasks/:id", ctrl.MuxHandler("watch", h, nil))
	service.LogInfo("mount", "ctrl", "InstanceGroupDestructionTask", "action", "Watch", "route", "PUT /destruction_tasks/:id", "security", "api_key")
}

// handleInstanceGroupDestructionTaskOrigin applies the CORS response headers corresponding to the origin.
func handleInstanceGroupDestructionTaskOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// InstanceGroupResizingTaskController is the controller interface for the InstanceGroupResizingTask actions.
type InstanceGroupResizingTaskController interface {
	goa.Muxer
	Start(*StartInstanceGroupResizingTaskContext) error
	Watch(*WatchInstanceGroupResizingTaskContext) error
}

// MountInstanceGroupResizingTaskController "mounts" a InstanceGroupResizingTask resource controller on the given service.
func MountInstanceGroupResizingTaskController(service *goa.Service, ctrl InstanceGroupResizingTaskController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/resizing_tasks", ctrl.MuxHandler("preflight", handleInstanceGroupResizingTaskOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/resizing_tasks/:id", ctrl.MuxHandler("preflight", handleInstanceGroupResizingTaskOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartInstanceGroupResizingTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleInstanceGroupResizingTaskOrigin(h)
	service.Mux.Handle("POST", "/resizing_tasks", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "InstanceGroupResizingTask", "action", "Start", "route", "POST /resizing_tasks", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWatchInstanceGroupResizingTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Watch(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleInstanceGroupResizingTaskOrigin(h)
	service.Mux.Handle("PUT", "/resizing_tasks/:id", ctrl.MuxHandler("watch", h, nil))
	service.LogInfo("mount", "ctrl", "InstanceGroupResizingTask", "action", "Watch", "route", "PUT /resizing_tasks/:id", "security", "api_key")
}

// handleInstanceGroupResizingTaskOrigin applies the CORS response headers corresponding to the origin.
func handleInstanceGroupResizingTaskOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// IntanceGroupController is the controller interface for the IntanceGroup actions.
type IntanceGroupController interface {
	goa.Muxer
	Create(*CreateIntanceGroupContext) error
	Delete(*DeleteIntanceGroupContext) error
	Destruct(*DestructIntanceGroupContext) error
	List(*ListIntanceGroupContext) error
	Resize(*ResizeIntanceGroupContext) error
	Show(*ShowIntanceGroupContext) error
}

// MountIntanceGroupController "mounts" a IntanceGroup resource controller on the given service.
func MountIntanceGroupController(service *goa.Service, ctrl IntanceGroupController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/instance_groups", ctrl.MuxHandler("preflight", handleIntanceGroupOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/instance_groups/:id", ctrl.MuxHandler("preflight", handleIntanceGroupOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/instance_groups/:id/destruct", ctrl.MuxHandler("preflight", handleIntanceGroupOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/instance_groups/:id/resize", ctrl.MuxHandler("preflight", handleIntanceGroupOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateIntanceGroupContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*InstanceGroupPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleIntanceGroupOrigin(h)
	service.Mux.Handle("POST", "/instance_groups", ctrl.MuxHandler("create", h, unmarshalCreateIntanceGroupPayload))
	service.LogInfo("mount", "ctrl", "IntanceGroup", "action", "Create", "route", "POST /instance_groups", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteIntanceGroupContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleIntanceGroupOrigin(h)
	service.Mux.Handle("DELETE", "/instance_groups/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "IntanceGroup", "action", "Delete", "route", "DELETE /instance_groups/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDestructIntanceGroupContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Destruct(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleIntanceGroupOrigin(h)
	service.Mux.Handle("PUT", "/instance_groups/:id/destruct", ctrl.MuxHandler("destruct", h, nil))
	service.LogInfo("mount", "ctrl", "IntanceGroup", "action", "Destruct", "route", "PUT /instance_groups/:id/destruct", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIntanceGroupContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleIntanceGroupOrigin(h)
	service.Mux.Handle("GET", "/instance_groups", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "IntanceGroup", "action", "List", "route", "GET /instance_groups", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewResizeIntanceGroupContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ResizeIntanceGroupPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Resize(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleIntanceGroupOrigin(h)
	service.Mux.Handle("PUT", "/instance_groups/:id/resize", ctrl.MuxHandler("resize", h, unmarshalResizeIntanceGroupPayload))
	service.LogInfo("mount", "ctrl", "IntanceGroup", "action", "Resize", "route", "PUT /instance_groups/:id/resize", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowIntanceGroupContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleIntanceGroupOrigin(h)
	service.Mux.Handle("GET", "/instance_groups/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "IntanceGroup", "action", "Show", "route", "GET /instance_groups/:id", "security", "api_key")
}

// handleIntanceGroupOrigin applies the CORS response headers corresponding to the origin.
func handleIntanceGroupOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateIntanceGroupPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateIntanceGroupPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &instanceGroupPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalResizeIntanceGroupPayload unmarshals the request body into the context request data Payload field.
func unmarshalResizeIntanceGroupPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &resizeIntanceGroupPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// JobController is the controller interface for the Job actions.
type JobController interface {
	goa.Muxer
	Activate(*ActivateJobContext) error
	Create(*CreateJobContext) error
	Delete(*DeleteJobContext) error
	Inactivate(*InactivateJobContext) error
	PublishingTask(*PublishingTaskJobContext) error
	Show(*ShowJobContext) error
}

// MountJobController "mounts" a Job resource controller on the given service.
func MountJobController(service *goa.Service, ctrl JobController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/jobs/:id/activate", ctrl.MuxHandler("preflight", handleJobOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/jobs", ctrl.MuxHandler("preflight", handleJobOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/jobs/:id", ctrl.MuxHandler("preflight", handleJobOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/jobs/:id/inactivate", ctrl.MuxHandler("preflight", handleJobOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/jobs/:id/publishing_task", ctrl.MuxHandler("preflight", handleJobOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewActivateJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Activate(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleJobOrigin(h)
	service.Mux.Handle("PUT", "/jobs/:id/activate", ctrl.MuxHandler("activate", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "Activate", "route", "PUT /jobs/:id/activate", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*JobPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleJobOrigin(h)
	service.Mux.Handle("POST", "/jobs", ctrl.MuxHandler("create", h, unmarshalCreateJobPayload))
	service.LogInfo("mount", "ctrl", "Job", "action", "Create", "route", "POST /jobs", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleJobOrigin(h)
	service.Mux.Handle("DELETE", "/jobs/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "Delete", "route", "DELETE /jobs/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInactivateJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Inactivate(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleJobOrigin(h)
	service.Mux.Handle("PUT", "/jobs/:id/inactivate", ctrl.MuxHandler("inactivate", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "Inactivate", "route", "PUT /jobs/:id/inactivate", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPublishingTaskJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.PublishingTask(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleJobOrigin(h)
	service.Mux.Handle("PUT", "/jobs/:id/publishing_task", ctrl.MuxHandler("publishing_task", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "PublishingTask", "route", "PUT /jobs/:id/publishing_task", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleJobOrigin(h)
	service.Mux.Handle("GET", "/jobs/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "Show", "route", "GET /jobs/:id", "security", "api_key")
}

// handleJobOrigin applies the CORS response headers corresponding to the origin.
func handleJobOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateJobPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateJobPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &jobPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PipelineController is the controller interface for the Pipeline actions.
type PipelineController interface {
	goa.Muxer
	Create(*CreatePipelineContext) error
	Current(*CurrentPipelineContext) error
	Delete(*DeletePipelineContext) error
	List(*ListPipelineContext) error
	PreparingFinalizeTask(*PreparingFinalizeTaskPipelineContext) error
	Show(*ShowPipelineContext) error
	Stop(*StopPipelineContext) error
}

// MountPipelineController "mounts" a Pipeline resource controller on the given service.
func MountPipelineController(service *goa.Service, ctrl PipelineController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/pipelines", ctrl.MuxHandler("preflight", handlePipelineOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipelines/:id/current", ctrl.MuxHandler("preflight", handlePipelineOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipelines/:id", ctrl.MuxHandler("preflight", handlePipelineOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipelines/:id/preparing_finalize_task", ctrl.MuxHandler("preflight", handlePipelineOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipelines/:id/stop", ctrl.MuxHandler("preflight", handlePipelineOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PipelinePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("POST", "/pipelines", ctrl.MuxHandler("create", h, unmarshalCreatePipelinePayload))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "Create", "route", "POST /pipelines", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCurrentPipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Current(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("PUT", "/pipelines/:id/current", ctrl.MuxHandler("current", h, nil))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "Current", "route", "PUT /pipelines/:id/current", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeletePipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("DELETE", "/pipelines/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "Delete", "route", "DELETE /pipelines/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("GET", "/pipelines", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "List", "route", "GET /pipelines", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPreparingFinalizeTaskPipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.PreparingFinalizeTask(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("PUT", "/pipelines/:id/preparing_finalize_task", ctrl.MuxHandler("preparing_finalize_task", h, nil))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "PreparingFinalizeTask", "route", "PUT /pipelines/:id/preparing_finalize_task", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("GET", "/pipelines/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "Show", "route", "GET /pipelines/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStopPipelineContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Stop(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineOrigin(h)
	service.Mux.Handle("PUT", "/pipelines/:id/stop", ctrl.MuxHandler("stop", h, nil))
	service.LogInfo("mount", "ctrl", "Pipeline", "action", "Stop", "route", "PUT /pipelines/:id/stop", "security", "api_key")
}

// handlePipelineOrigin applies the CORS response headers corresponding to the origin.
func handlePipelineOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreatePipelinePayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePipelinePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &pipelinePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PipelineBaseController is the controller interface for the PipelineBase actions.
type PipelineBaseController interface {
	goa.Muxer
	Close(*ClosePipelineBaseContext) error
	Create(*CreatePipelineBaseContext) error
	Delete(*DeletePipelineBaseContext) error
	HibernationCheckingTask(*HibernationCheckingTaskPipelineBaseContext) error
	HibernationDoneTask(*HibernationDoneTaskPipelineBaseContext) error
	List(*ListPipelineBaseContext) error
	PullTask(*PullTaskPipelineBaseContext) error
	Show(*ShowPipelineBaseContext) error
	WakeupDoneTask(*WakeupDoneTaskPipelineBaseContext) error
}

// MountPipelineBaseController "mounts" a PipelineBase resource controller on the given service.
func MountPipelineBaseController(service *goa.Service, ctrl PipelineBaseController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/pipeline_bases/:id", ctrl.MuxHandler("preflight", handlePipelineBaseOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipeline_bases", ctrl.MuxHandler("preflight", handlePipelineBaseOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipeline_bases/:id/hibernation_checking_task", ctrl.MuxHandler("preflight", handlePipelineBaseOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipeline_bases/:id/hibernation_done_task", ctrl.MuxHandler("preflight", handlePipelineBaseOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipeline_bases/:id/pull_task", ctrl.MuxHandler("preflight", handlePipelineBaseOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pipeline_bases/:id/wakeup_done_task", ctrl.MuxHandler("preflight", handlePipelineBaseOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewClosePipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Close(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("PUT", "/pipeline_bases/:id", ctrl.MuxHandler("close", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "Close", "route", "PUT /pipeline_bases/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PipelineBasePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("POST", "/pipeline_bases", ctrl.MuxHandler("create", h, unmarshalCreatePipelineBasePayload))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "Create", "route", "POST /pipeline_bases", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeletePipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("DELETE", "/pipeline_bases/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "Delete", "route", "DELETE /pipeline_bases/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHibernationCheckingTaskPipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.HibernationCheckingTask(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("PUT", "/pipeline_bases/:id/hibernation_checking_task", ctrl.MuxHandler("hibernation_checking_task", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "HibernationCheckingTask", "route", "PUT /pipeline_bases/:id/hibernation_checking_task", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHibernationDoneTaskPipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.HibernationDoneTask(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("PUT", "/pipeline_bases/:id/hibernation_done_task", ctrl.MuxHandler("hibernation_done_task", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "HibernationDoneTask", "route", "PUT /pipeline_bases/:id/hibernation_done_task", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("GET", "/pipeline_bases", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "List", "route", "GET /pipeline_bases", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPullTaskPipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.PullTask(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("PUT", "/pipeline_bases/:id/pull_task", ctrl.MuxHandler("pull_task", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "PullTask", "route", "PUT /pipeline_bases/:id/pull_task", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("GET", "/pipeline_bases/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "Show", "route", "GET /pipeline_bases/:id", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWakeupDoneTaskPipelineBaseContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.WakeupDoneTask(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOrigin(h)
	service.Mux.Handle("PUT", "/pipeline_bases/:id/wakeup_done_task", ctrl.MuxHandler("wakeup_done_task", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBase", "action", "WakeupDoneTask", "route", "PUT /pipeline_bases/:id/wakeup_done_task", "security", "api_key")
}

// handlePipelineBaseOrigin applies the CORS response headers corresponding to the origin.
func handlePipelineBaseOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreatePipelineBasePayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePipelineBasePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &pipelineBasePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PipelineBaseClosingTaskController is the controller interface for the PipelineBaseClosingTask actions.
type PipelineBaseClosingTaskController interface {
	goa.Muxer
	Start(*StartPipelineBaseClosingTaskContext) error
	Watch(*WatchPipelineBaseClosingTaskContext) error
}

// MountPipelineBaseClosingTaskController "mounts" a PipelineBaseClosingTask resource controller on the given service.
func MountPipelineBaseClosingTaskController(service *goa.Service, ctrl PipelineBaseClosingTaskController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/closing_tasks", ctrl.MuxHandler("preflight", handlePipelineBaseClosingTaskOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/closing_tasks/:id", ctrl.MuxHandler("preflight", handlePipelineBaseClosingTaskOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartPipelineBaseClosingTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseClosingTaskOrigin(h)
	service.Mux.Handle("POST", "/closing_tasks", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBaseClosingTask", "action", "Start", "route", "POST /closing_tasks", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWatchPipelineBaseClosingTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Watch(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseClosingTaskOrigin(h)
	service.Mux.Handle("PUT", "/closing_tasks/:id", ctrl.MuxHandler("watch", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBaseClosingTask", "action", "Watch", "route", "PUT /closing_tasks/:id", "security", "api_key")
}

// handlePipelineBaseClosingTaskOrigin applies the CORS response headers corresponding to the origin.
func handlePipelineBaseClosingTaskOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// PipelineBaseOpeningTaskController is the controller interface for the PipelineBaseOpeningTask actions.
type PipelineBaseOpeningTaskController interface {
	goa.Muxer
	Start(*StartPipelineBaseOpeningTaskContext) error
	Watch(*WatchPipelineBaseOpeningTaskContext) error
}

// MountPipelineBaseOpeningTaskController "mounts" a PipelineBaseOpeningTask resource controller on the given service.
func MountPipelineBaseOpeningTaskController(service *goa.Service, ctrl PipelineBaseOpeningTaskController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/opening_tasks", ctrl.MuxHandler("preflight", handlePipelineBaseOpeningTaskOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/opening_tasks/:id", ctrl.MuxHandler("preflight", handlePipelineBaseOpeningTaskOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartPipelineBaseOpeningTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOpeningTaskOrigin(h)
	service.Mux.Handle("POST", "/opening_tasks", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBaseOpeningTask", "action", "Start", "route", "POST /opening_tasks", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWatchPipelineBaseOpeningTaskContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Watch(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePipelineBaseOpeningTaskOrigin(h)
	service.Mux.Handle("PUT", "/opening_tasks/:id", ctrl.MuxHandler("watch", h, nil))
	service.LogInfo("mount", "ctrl", "PipelineBaseOpeningTask", "action", "Watch", "route", "PUT /opening_tasks/:id", "security", "api_key")
}

// handlePipelineBaseOpeningTaskOrigin applies the CORS response headers corresponding to the origin.
func handlePipelineBaseOpeningTaskOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// DummyAuthsController is the controller interface for the DummyAuths actions.
type DummyAuthsController interface {
	goa.Muxer
	Create(*CreateDummyAuthsContext) error
}

// MountDummyAuthsController "mounts" a DummyAuths resource controller on the given service.
func MountDummyAuthsController(service *goa.Service, ctrl DummyAuthsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/dummy-auths", ctrl.MuxHandler("preflight", handleDummyAuthsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateDummyAuthsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Create(rctx)
	}
	h = handleDummyAuthsOrigin(h)
	service.Mux.Handle("POST", "/dummy-auths", ctrl.MuxHandler("create", h, nil))
	service.LogInfo("mount", "ctrl", "DummyAuths", "action", "Create", "route", "POST /dummy-auths")
}

// handleDummyAuthsOrigin applies the CORS response headers corresponding to the origin.
func handleDummyAuthsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger/*filepath", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger/*filepath", "../static/swagger/")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "../static/swagger/", "route", "GET /swagger/*filepath")

	h = ctrl.FileHandler("/swagger.json", "../swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "../swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/swagger/", "../static/swagger/index.html")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "../static/swagger/index.html", "route", "GET /swagger/")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

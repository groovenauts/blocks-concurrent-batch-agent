// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"time"
)

// CreateInstanceGroupContext provides the InstanceGroup create action context.
type CreateInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrgID   string
	Payload *InstanceGroupPayload
}

// NewCreateInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller create action.
func NewCreateInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateInstanceGroupContext) Created(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteInstanceGroupContext provides the InstanceGroup delete action context.
type DeleteInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewDeleteInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller delete action.
func NewDeleteInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteInstanceGroupContext) OK(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *DeleteInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DestructInstanceGroupContext provides the InstanceGroup destruct action context.
type DestructInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewDestructInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller destruct action.
func NewDestructInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*DestructInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DestructInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DestructInstanceGroupContext) OK(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *DestructInstanceGroupContext) Created(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DestructInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DestructInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DestructInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *DestructInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DestructInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListInstanceGroupContext provides the InstanceGroup list action context.
type ListInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrgID string
}

// NewListInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller list action.
func NewListInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListInstanceGroupContext) OK(r InstanceGroupCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json; type=collection")
	}
	if r == nil {
		r = InstanceGroupCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ListInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ResizeInstanceGroupContext provides the InstanceGroup resize action context.
type ResizeInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name    string
	NewSize int
	OrgID   string
}

// NewResizeInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller resize action.
func NewResizeInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*ResizeInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ResizeInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramNewSize := req.Params["new_size"]
	if len(paramNewSize) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("new_size"))
	} else {
		rawNewSize := paramNewSize[0]
		if newSize, err2 := strconv.Atoi(rawNewSize); err2 == nil {
			rctx.NewSize = newSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("new_size", rawNewSize, "integer"))
		}
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ResizeInstanceGroupContext) OK(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *ResizeInstanceGroupContext) Created(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ResizeInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ResizeInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ResizeInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ResizeInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ResizeInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowInstanceGroupContext provides the InstanceGroup show action context.
type ShowInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewShowInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller show action.
func NewShowInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowInstanceGroupContext) OK(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ShowInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartHealthCheckInstanceGroupContext provides the InstanceGroup start_health_check action context.
type StartHealthCheckInstanceGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartHealthCheckInstanceGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroup controller start_health_check action.
func NewStartHealthCheckInstanceGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartHealthCheckInstanceGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartHealthCheckInstanceGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartHealthCheckInstanceGroupContext) OK(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartHealthCheckInstanceGroupContext) Created(r *InstanceGroup) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartHealthCheckInstanceGroupContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartHealthCheckInstanceGroupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartHealthCheckInstanceGroupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartHealthCheckInstanceGroupContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartHealthCheckInstanceGroupContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartInstanceGroupConstructionTaskContext provides the InstanceGroupConstructionTask start action context.
type StartInstanceGroupConstructionTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartInstanceGroupConstructionTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupConstructionTask controller start action.
func NewStartInstanceGroupConstructionTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartInstanceGroupConstructionTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartInstanceGroupConstructionTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartInstanceGroupConstructionTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartInstanceGroupConstructionTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StartInstanceGroupConstructionTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *StartInstanceGroupConstructionTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *StartInstanceGroupConstructionTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartInstanceGroupConstructionTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartInstanceGroupConstructionTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartInstanceGroupConstructionTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartInstanceGroupConstructionTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartInstanceGroupConstructionTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WatchInstanceGroupConstructionTaskContext provides the InstanceGroupConstructionTask watch action context.
type WatchInstanceGroupConstructionTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewWatchInstanceGroupConstructionTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupConstructionTask controller watch action.
func NewWatchInstanceGroupConstructionTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchInstanceGroupConstructionTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchInstanceGroupConstructionTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WatchInstanceGroupConstructionTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *WatchInstanceGroupConstructionTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *WatchInstanceGroupConstructionTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *WatchInstanceGroupConstructionTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *WatchInstanceGroupConstructionTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchInstanceGroupConstructionTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WatchInstanceGroupConstructionTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *WatchInstanceGroupConstructionTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *WatchInstanceGroupConstructionTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *WatchInstanceGroupConstructionTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartInstanceGroupDestructionTaskContext provides the InstanceGroupDestructionTask start action context.
type StartInstanceGroupDestructionTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartInstanceGroupDestructionTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupDestructionTask controller start action.
func NewStartInstanceGroupDestructionTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartInstanceGroupDestructionTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartInstanceGroupDestructionTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartInstanceGroupDestructionTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartInstanceGroupDestructionTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StartInstanceGroupDestructionTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *StartInstanceGroupDestructionTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *StartInstanceGroupDestructionTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartInstanceGroupDestructionTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartInstanceGroupDestructionTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartInstanceGroupDestructionTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartInstanceGroupDestructionTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartInstanceGroupDestructionTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WatchInstanceGroupDestructionTaskContext provides the InstanceGroupDestructionTask watch action context.
type WatchInstanceGroupDestructionTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewWatchInstanceGroupDestructionTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupDestructionTask controller watch action.
func NewWatchInstanceGroupDestructionTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchInstanceGroupDestructionTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchInstanceGroupDestructionTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WatchInstanceGroupDestructionTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *WatchInstanceGroupDestructionTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *WatchInstanceGroupDestructionTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *WatchInstanceGroupDestructionTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *WatchInstanceGroupDestructionTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchInstanceGroupDestructionTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WatchInstanceGroupDestructionTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *WatchInstanceGroupDestructionTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *WatchInstanceGroupDestructionTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *WatchInstanceGroupDestructionTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ExecuteInstanceGroupHealthCheckContext provides the InstanceGroupHealthCheck execute action context.
type ExecuteInstanceGroupHealthCheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewExecuteInstanceGroupHealthCheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupHealthCheck controller execute action.
func NewExecuteInstanceGroupHealthCheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*ExecuteInstanceGroupHealthCheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ExecuteInstanceGroupHealthCheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ExecuteInstanceGroupHealthCheckContext) OK(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *ExecuteInstanceGroupHealthCheckContext) Created(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *ExecuteInstanceGroupHealthCheckContext) Accepted(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *ExecuteInstanceGroupHealthCheckContext) NoContent(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// PartialContent sends a HTTP response with status code 206.
func (ctx *ExecuteInstanceGroupHealthCheckContext) PartialContent(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 206, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ExecuteInstanceGroupHealthCheckContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ExecuteInstanceGroupHealthCheckContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ExecuteInstanceGroupHealthCheckContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ExecuteInstanceGroupHealthCheckContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ExecuteInstanceGroupHealthCheckContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartInstanceGroupHealthCheckContext provides the InstanceGroupHealthCheck start action context.
type StartInstanceGroupHealthCheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartInstanceGroupHealthCheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupHealthCheck controller start action.
func NewStartInstanceGroupHealthCheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartInstanceGroupHealthCheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartInstanceGroupHealthCheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartInstanceGroupHealthCheckContext) OK(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartInstanceGroupHealthCheckContext) Created(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *StartInstanceGroupHealthCheckContext) NoContent(r *InstanceGroupHealthCheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.instance-group-health-check+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartInstanceGroupHealthCheckContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartInstanceGroupHealthCheckContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartInstanceGroupHealthCheckContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartInstanceGroupHealthCheckContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartInstanceGroupHealthCheckContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartInstanceGroupResizingTaskContext provides the InstanceGroupResizingTask start action context.
type StartInstanceGroupResizingTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartInstanceGroupResizingTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupResizingTask controller start action.
func NewStartInstanceGroupResizingTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartInstanceGroupResizingTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartInstanceGroupResizingTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartInstanceGroupResizingTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartInstanceGroupResizingTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StartInstanceGroupResizingTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *StartInstanceGroupResizingTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *StartInstanceGroupResizingTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartInstanceGroupResizingTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartInstanceGroupResizingTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartInstanceGroupResizingTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartInstanceGroupResizingTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartInstanceGroupResizingTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WatchInstanceGroupResizingTaskContext provides the InstanceGroupResizingTask watch action context.
type WatchInstanceGroupResizingTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewWatchInstanceGroupResizingTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the InstanceGroupResizingTask controller watch action.
func NewWatchInstanceGroupResizingTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchInstanceGroupResizingTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchInstanceGroupResizingTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WatchInstanceGroupResizingTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *WatchInstanceGroupResizingTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *WatchInstanceGroupResizingTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *WatchInstanceGroupResizingTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *WatchInstanceGroupResizingTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchInstanceGroupResizingTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WatchInstanceGroupResizingTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *WatchInstanceGroupResizingTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *WatchInstanceGroupResizingTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *WatchInstanceGroupResizingTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreatePipelineContext provides the Pipeline create action context.
type CreatePipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrgID   string
	Payload *PipelinePayload
}

// NewCreatePipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller create action.
func NewCreatePipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreatePipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreatePipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePipelineContext) Created(r *Pipeline) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreatePipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreatePipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreatePipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreatePipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CurrentPipelineContext provides the Pipeline current action context.
type CurrentPipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name             string
	OrgID            string
	PipelineBaseName string
}

// NewCurrentPipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller current action.
func NewCurrentPipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*CurrentPipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CurrentPipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	paramPipelineBaseName := req.Params["pipeline_base_name"]
	if len(paramPipelineBaseName) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("pipeline_base_name"))
	} else {
		rawPipelineBaseName := paramPipelineBaseName[0]
		rctx.PipelineBaseName = rawPipelineBaseName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CurrentPipelineContext) OK(r *Pipeline) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CurrentPipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CurrentPipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CurrentPipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CurrentPipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CurrentPipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeletePipelineContext provides the Pipeline delete action context.
type DeletePipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewDeletePipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller delete action.
func NewDeletePipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeletePipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeletePipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeletePipelineContext) OK(r *Pipeline) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeletePipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *DeletePipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeletePipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListPipelineContext provides the Pipeline list action context.
type ListPipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrgID string
}

// NewListPipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller list action.
func NewListPipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPipelineContext) OK(r PipelineCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json; type=collection")
	}
	if r == nil {
		r = PipelineCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListPipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListPipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ListPipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// PreparingFinalizeTaskPipelineContext provides the Pipeline preparing_finalize_task action context.
type PreparingFinalizeTaskPipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Error       *string
	Name        string
	OperationID *string
	OrgID       string
}

// NewPreparingFinalizeTaskPipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller preparing_finalize_task action.
func NewPreparingFinalizeTaskPipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*PreparingFinalizeTaskPipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PreparingFinalizeTaskPipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramError := req.Params["error"]
	if len(paramError) > 0 {
		rawError := paramError[0]
		rctx.Error = &rawError
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOperationID := req.Params["operation_id"]
	if len(paramOperationID) > 0 {
		rawOperationID := paramOperationID[0]
		rctx.OperationID = &rawOperationID
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PreparingFinalizeTaskPipelineContext) OK(r *Pipeline) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PreparingFinalizeTaskPipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PreparingFinalizeTaskPipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PreparingFinalizeTaskPipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *PreparingFinalizeTaskPipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *PreparingFinalizeTaskPipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowPipelineContext provides the Pipeline show action context.
type ShowPipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewShowPipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller show action.
func NewShowPipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPipelineContext) OK(r *Pipeline) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowPipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ShowPipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StopPipelineContext provides the Pipeline stop action context.
type StopPipelineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStopPipelineContext parses the incoming request URL and body, performs validations and creates the
// context used by the Pipeline controller stop action.
func NewStopPipelineContext(ctx context.Context, r *http.Request, service *goa.Service) (*StopPipelineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StopPipelineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StopPipelineContext) OK(r *Pipeline) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StopPipelineContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StopPipelineContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StopPipelineContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StopPipelineContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StopPipelineContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ClosePipelineBaseContext provides the PipelineBase close action context.
type ClosePipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewClosePipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller close action.
func NewClosePipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ClosePipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ClosePipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ClosePipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *ClosePipelineBaseContext) Created(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ClosePipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ClosePipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ClosePipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ClosePipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ClosePipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreatePipelineBaseContext provides the PipelineBase create action context.
type CreatePipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrgID   string
	Payload *PipelineBasePayload
}

// NewCreatePipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller create action.
func NewCreatePipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreatePipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreatePipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePipelineBaseContext) Created(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreatePipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreatePipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreatePipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreatePipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeletePipelineBaseContext provides the PipelineBase delete action context.
type DeletePipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewDeletePipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller delete action.
func NewDeletePipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeletePipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeletePipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeletePipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeletePipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *DeletePipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeletePipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// HibernationCheckingTaskPipelineBaseContext provides the PipelineBase hibernation_checking_task action context.
type HibernationCheckingTaskPipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
	Since time.Time
}

// NewHibernationCheckingTaskPipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller hibernation_checking_task action.
func NewHibernationCheckingTaskPipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*HibernationCheckingTaskPipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HibernationCheckingTaskPipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	paramSince := req.Params["since"]
	if len(paramSince) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("since"))
	} else {
		rawSince := paramSince[0]
		if since, err2 := time.Parse(time.RFC3339, rawSince); err2 == nil {
			rctx.Since = since
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("since", rawSince, "datetime"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HibernationCheckingTaskPipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *HibernationCheckingTaskPipelineBaseContext) Created(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *HibernationCheckingTaskPipelineBaseContext) NoContent(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HibernationCheckingTaskPipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *HibernationCheckingTaskPipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *HibernationCheckingTaskPipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *HibernationCheckingTaskPipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *HibernationCheckingTaskPipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// HibernationDoneTaskPipelineBaseContext provides the PipelineBase hibernation_done_task action context.
type HibernationDoneTaskPipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Error       *string
	Name        string
	OperationID *string
	OrgID       string
}

// NewHibernationDoneTaskPipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller hibernation_done_task action.
func NewHibernationDoneTaskPipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*HibernationDoneTaskPipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HibernationDoneTaskPipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramError := req.Params["error"]
	if len(paramError) > 0 {
		rawError := paramError[0]
		rctx.Error = &rawError
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOperationID := req.Params["operation_id"]
	if len(paramOperationID) > 0 {
		rawOperationID := paramOperationID[0]
		rctx.OperationID = &rawOperationID
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HibernationDoneTaskPipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *HibernationDoneTaskPipelineBaseContext) Accepted(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *HibernationDoneTaskPipelineBaseContext) NoContent(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *HibernationDoneTaskPipelineBaseContext) ResetContent(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HibernationDoneTaskPipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *HibernationDoneTaskPipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *HibernationDoneTaskPipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *HibernationDoneTaskPipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *HibernationDoneTaskPipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListPipelineBaseContext provides the PipelineBase list action context.
type ListPipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrgID string
}

// NewListPipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller list action.
func NewListPipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPipelineBaseContext) OK(r PipelineBaseCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json; type=collection")
	}
	if r == nil {
		r = PipelineBaseCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListPipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListPipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ListPipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// PullTaskPipelineBaseContext provides the PipelineBase pull_task action context.
type PullTaskPipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewPullTaskPipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller pull_task action.
func NewPullTaskPipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*PullTaskPipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PullTaskPipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PullTaskPipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PullTaskPipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PullTaskPipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PullTaskPipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *PullTaskPipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *PullTaskPipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowPipelineBaseContext provides the PipelineBase show action context.
type ShowPipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewShowPipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller show action.
func NewShowPipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowPipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ShowPipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WakeupDoneTaskPipelineBaseContext provides the PipelineBase wakeup_done_task action context.
type WakeupDoneTaskPipelineBaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Error       *string
	Name        string
	OperationID *string
	OrgID       string
}

// NewWakeupDoneTaskPipelineBaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBase controller wakeup_done_task action.
func NewWakeupDoneTaskPipelineBaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*WakeupDoneTaskPipelineBaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WakeupDoneTaskPipelineBaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramError := req.Params["error"]
	if len(paramError) > 0 {
		rawError := paramError[0]
		rctx.Error = &rawError
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOperationID := req.Params["operation_id"]
	if len(paramOperationID) > 0 {
		rawOperationID := paramOperationID[0]
		rctx.OperationID = &rawOperationID
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WakeupDoneTaskPipelineBaseContext) OK(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *WakeupDoneTaskPipelineBaseContext) Accepted(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *WakeupDoneTaskPipelineBaseContext) NoContent(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *WakeupDoneTaskPipelineBaseContext) ResetContent(r *PipelineBase) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pipeline-base+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WakeupDoneTaskPipelineBaseContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WakeupDoneTaskPipelineBaseContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *WakeupDoneTaskPipelineBaseContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *WakeupDoneTaskPipelineBaseContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *WakeupDoneTaskPipelineBaseContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartPipelineBaseClosingTaskContext provides the PipelineBaseClosingTask start action context.
type StartPipelineBaseClosingTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartPipelineBaseClosingTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBaseClosingTask controller start action.
func NewStartPipelineBaseClosingTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartPipelineBaseClosingTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartPipelineBaseClosingTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartPipelineBaseClosingTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartPipelineBaseClosingTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StartPipelineBaseClosingTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *StartPipelineBaseClosingTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *StartPipelineBaseClosingTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartPipelineBaseClosingTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartPipelineBaseClosingTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartPipelineBaseClosingTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartPipelineBaseClosingTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartPipelineBaseClosingTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WatchPipelineBaseClosingTaskContext provides the PipelineBaseClosingTask watch action context.
type WatchPipelineBaseClosingTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewWatchPipelineBaseClosingTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBaseClosingTask controller watch action.
func NewWatchPipelineBaseClosingTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchPipelineBaseClosingTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchPipelineBaseClosingTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WatchPipelineBaseClosingTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *WatchPipelineBaseClosingTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *WatchPipelineBaseClosingTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *WatchPipelineBaseClosingTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *WatchPipelineBaseClosingTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchPipelineBaseClosingTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WatchPipelineBaseClosingTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *WatchPipelineBaseClosingTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *WatchPipelineBaseClosingTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *WatchPipelineBaseClosingTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// PublishingTaskPipelineBaseJobContext provides the PipelineBaseJob publishing_task action context.
type PublishingTaskPipelineBaseJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewPublishingTaskPipelineBaseJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBaseJob controller publishing_task action.
func NewPublishingTaskPipelineBaseJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*PublishingTaskPipelineBaseJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PublishingTaskPipelineBaseJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PublishingTaskPipelineBaseJobContext) OK(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PublishingTaskPipelineBaseJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PublishingTaskPipelineBaseJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PublishingTaskPipelineBaseJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *PublishingTaskPipelineBaseJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *PublishingTaskPipelineBaseJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// StartPipelineBaseOpeningTaskContext provides the PipelineBaseOpeningTask start action context.
type StartPipelineBaseOpeningTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name  string
	OrgID string
}

// NewStartPipelineBaseOpeningTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBaseOpeningTask controller start action.
func NewStartPipelineBaseOpeningTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartPipelineBaseOpeningTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartPipelineBaseOpeningTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StartPipelineBaseOpeningTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *StartPipelineBaseOpeningTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StartPipelineBaseOpeningTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *StartPipelineBaseOpeningTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *StartPipelineBaseOpeningTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartPipelineBaseOpeningTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StartPipelineBaseOpeningTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartPipelineBaseOpeningTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *StartPipelineBaseOpeningTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *StartPipelineBaseOpeningTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WatchPipelineBaseOpeningTaskContext provides the PipelineBaseOpeningTask watch action context.
type WatchPipelineBaseOpeningTaskContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewWatchPipelineBaseOpeningTaskContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineBaseOpeningTask controller watch action.
func NewWatchPipelineBaseOpeningTaskContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchPipelineBaseOpeningTaskContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchPipelineBaseOpeningTaskContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WatchPipelineBaseOpeningTaskContext) OK(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *WatchPipelineBaseOpeningTaskContext) Created(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *WatchPipelineBaseOpeningTaskContext) Accepted(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *WatchPipelineBaseOpeningTaskContext) NoContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 204, r)
}

// ResetContent sends a HTTP response with status code 205.
func (ctx *WatchPipelineBaseOpeningTaskContext) ResetContent(r *CloudAsyncOperation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cloud-async-operation+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 205, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchPipelineBaseOpeningTaskContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WatchPipelineBaseOpeningTaskContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *WatchPipelineBaseOpeningTaskContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *WatchPipelineBaseOpeningTaskContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *WatchPipelineBaseOpeningTaskContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ActivatePipelineJobContext provides the PipelineJob activate action context.
type ActivatePipelineJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewActivatePipelineJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineJob controller activate action.
func NewActivatePipelineJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*ActivatePipelineJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ActivatePipelineJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ActivatePipelineJobContext) OK(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *ActivatePipelineJobContext) Created(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ActivatePipelineJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ActivatePipelineJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ActivatePipelineJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ActivatePipelineJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ActivatePipelineJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreatePipelineJobContext provides the PipelineJob create action context.
type CreatePipelineJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Active  *string
	Name    string
	OrgID   string
	Payload *JobPayload
}

// NewCreatePipelineJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineJob controller create action.
func NewCreatePipelineJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreatePipelineJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreatePipelineJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramActive := req.Params["active"]
	if len(paramActive) > 0 {
		rawActive := paramActive[0]
		rctx.Active = &rawActive
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePipelineJobContext) Created(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePipelineJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreatePipelineJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreatePipelineJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreatePipelineJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreatePipelineJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeletePipelineJobContext provides the PipelineJob delete action context.
type DeletePipelineJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewDeletePipelineJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineJob controller delete action.
func NewDeletePipelineJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeletePipelineJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeletePipelineJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeletePipelineJobContext) OK(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePipelineJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeletePipelineJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePipelineJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *DeletePipelineJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeletePipelineJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// InactivatePipelineJobContext provides the PipelineJob inactivate action context.
type InactivatePipelineJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewInactivatePipelineJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineJob controller inactivate action.
func NewInactivatePipelineJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*InactivatePipelineJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := InactivatePipelineJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *InactivatePipelineJobContext) OK(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *InactivatePipelineJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *InactivatePipelineJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *InactivatePipelineJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *InactivatePipelineJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *InactivatePipelineJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// OutputPipelineJobContext provides the PipelineJob output action context.
type OutputPipelineJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewOutputPipelineJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineJob controller output action.
func NewOutputPipelineJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*OutputPipelineJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := OutputPipelineJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *OutputPipelineJobContext) OK(r *JobOutput) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job-output+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *OutputPipelineJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *OutputPipelineJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *OutputPipelineJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *OutputPipelineJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *OutputPipelineJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowPipelineJobContext provides the PipelineJob show action context.
type ShowPipelineJobContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID    string
	Name  string
	OrgID string
}

// NewShowPipelineJobContext parses the incoming request URL and body, performs validations and creates the
// context used by the PipelineJob controller show action.
func NewShowPipelineJobContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPipelineJobContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPipelineJobContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramOrgID := req.Params["org_id"]
	if len(paramOrgID) > 0 {
		rawOrgID := paramOrgID[0]
		rctx.OrgID = rawOrgID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPipelineJobContext) OK(r *Job) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.job+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPipelineJobContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowPipelineJobContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPipelineJobContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ShowPipelineJobContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPipelineJobContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateDummyAuthsContext provides the dummy-auths create action context.
type CreateDummyAuthsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCreateDummyAuthsContext parses the incoming request URL and body, performs validations and creates the
// context used by the dummy-auths controller create action.
func NewCreateDummyAuthsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateDummyAuthsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateDummyAuthsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateDummyAuthsContext) Created(r *DummyAuth) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.dummy-auth+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateDummyAuthsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateDummyAuthsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateDummyAuthsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateDummyAuthsContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateDummyAuthsContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

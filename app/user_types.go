// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application User Types
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
)

// accelerators user type.
type accelerators struct {
	// Count
	Count *int `form:"count,omitempty" json:"count,omitempty" yaml:"count,omitempty" xml:"count,omitempty"`
	// Type
	Type *string `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// Finalize sets the default values for accelerators type instance.
func (ut *accelerators) Finalize() {
	var defaultCount = 0
	if ut.Count == nil {
		ut.Count = &defaultCount
	}
	var defaultType = ""
	if ut.Type == nil {
		ut.Type = &defaultType
	}
}

// Validate validates the accelerators type instance.
func (ut *accelerators) Validate() (err error) {
	if ut.Count == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "count"))
	}
	if ut.Type == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "type"))
	}
	return
}

// Publicize creates Accelerators from accelerators
func (ut *accelerators) Publicize() *Accelerators {
	var pub Accelerators
	if ut.Count != nil {
		pub.Count = *ut.Count
	}
	if ut.Type != nil {
		pub.Type = *ut.Type
	}
	return &pub
}

// Accelerators user type.
type Accelerators struct {
	// Count
	Count int `form:"count" json:"count" yaml:"count" xml:"count"`
	// Type
	Type string `form:"type" json:"type" yaml:"type" xml:"type"`
}

// Validate validates the Accelerators type instance.
func (ut *Accelerators) Validate() (err error) {

	if ut.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "type"))
	}
	return
}

// instanceGroup user type.
type instanceGroup struct {
	// Boot disk
	BootDisk *pipelineVMDisk `form:"boot_disk,omitempty" json:"boot_disk,omitempty" yaml:"boot_disk,omitempty" xml:"boot_disk,omitempty"`
	// Deployment name
	DeploymentName *string `form:"deployment_name,omitempty" json:"deployment_name,omitempty" yaml:"deployment_name,omitempty" xml:"deployment_name,omitempty"`
	// GPU Accelerators
	GpuAccelerators *accelerators `form:"gpu_accelerators,omitempty" json:"gpu_accelerators,omitempty" yaml:"gpu_accelerators,omitempty" xml:"gpu_accelerators,omitempty"`
	// Instance size
	InstanceSize *int `form:"instance_size,omitempty" json:"instance_size,omitempty" yaml:"instance_size,omitempty" xml:"instance_size,omitempty"`
	// GCE Machine Type
	MachineType *string `form:"machine_type,omitempty" json:"machine_type,omitempty" yaml:"machine_type,omitempty" xml:"machine_type,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// Use preemptible VMs
	Preemptible *bool `form:"preemptible,omitempty" json:"preemptible,omitempty" yaml:"preemptible,omitempty" xml:"preemptible,omitempty"`
	// GCP Project ID
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" yaml:"project_id,omitempty" xml:"project_id,omitempty"`
	// Startup script
	StartupScript *string `form:"startup_script,omitempty" json:"startup_script,omitempty" yaml:"startup_script,omitempty" xml:"startup_script,omitempty"`
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// Token Consumption
	TokenConsumption *int `form:"token_consumption,omitempty" json:"token_consumption,omitempty" yaml:"token_consumption,omitempty" xml:"token_consumption,omitempty"`
	// GCP zone
	Zone *string `form:"zone,omitempty" json:"zone,omitempty" yaml:"zone,omitempty" xml:"zone,omitempty"`
}

// Finalize sets the default values for instanceGroup type instance.
func (ut *instanceGroup) Finalize() {
	if ut.BootDisk != nil {
		var defaultDiskSizeGb = 0
		if ut.BootDisk.DiskSizeGb == nil {
			ut.BootDisk.DiskSizeGb = &defaultDiskSizeGb
		}
		var defaultDiskType = ""
		if ut.BootDisk.DiskType == nil {
			ut.BootDisk.DiskType = &defaultDiskType
		}
		var defaultSourceImage = ""
		if ut.BootDisk.SourceImage == nil {
			ut.BootDisk.SourceImage = &defaultSourceImage
		}
	}
	if ut.GpuAccelerators != nil {
		var defaultCount = 0
		if ut.GpuAccelerators.Count == nil {
			ut.GpuAccelerators.Count = &defaultCount
		}
		var defaultType = ""
		if ut.GpuAccelerators.Type == nil {
			ut.GpuAccelerators.Type = &defaultType
		}
	}
}

// Validate validates the instanceGroup type instance.
func (ut *instanceGroup) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "project_id"))
	}
	if ut.Zone == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "zone"))
	}
	if ut.BootDisk == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "boot_disk"))
	}
	if ut.MachineType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "machine_type"))
	}
	if ut.BootDisk != nil {
		if err2 := ut.BootDisk.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.GpuAccelerators != nil {
		if err2 := ut.GpuAccelerators.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Status != nil {
		if !(*ut.Status == "constructing" || *ut.Status == "constructing_error" || *ut.Status == "constructed" || *ut.Status == "resizing" || *ut.Status == "destructing" || *ut.Status == "destructing_error" || *ut.Status == "destructed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.status`, *ut.Status, []interface{}{"constructing", "constructing_error", "constructed", "resizing", "destructing", "destructing_error", "destructed"}))
		}
	}
	return
}

// Publicize creates InstanceGroup from instanceGroup
func (ut *instanceGroup) Publicize() *InstanceGroup {
	var pub InstanceGroup
	if ut.BootDisk != nil {
		pub.BootDisk = ut.BootDisk.Publicize()
	}
	if ut.DeploymentName != nil {
		pub.DeploymentName = ut.DeploymentName
	}
	if ut.GpuAccelerators != nil {
		pub.GpuAccelerators = ut.GpuAccelerators.Publicize()
	}
	if ut.InstanceSize != nil {
		pub.InstanceSize = ut.InstanceSize
	}
	if ut.MachineType != nil {
		pub.MachineType = *ut.MachineType
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Preemptible != nil {
		pub.Preemptible = ut.Preemptible
	}
	if ut.ProjectID != nil {
		pub.ProjectID = *ut.ProjectID
	}
	if ut.StartupScript != nil {
		pub.StartupScript = ut.StartupScript
	}
	if ut.Status != nil {
		pub.Status = ut.Status
	}
	if ut.TokenConsumption != nil {
		pub.TokenConsumption = ut.TokenConsumption
	}
	if ut.Zone != nil {
		pub.Zone = *ut.Zone
	}
	return &pub
}

// InstanceGroup user type.
type InstanceGroup struct {
	// Boot disk
	BootDisk *PipelineVMDisk `form:"boot_disk" json:"boot_disk" yaml:"boot_disk" xml:"boot_disk"`
	// Deployment name
	DeploymentName *string `form:"deployment_name,omitempty" json:"deployment_name,omitempty" yaml:"deployment_name,omitempty" xml:"deployment_name,omitempty"`
	// GPU Accelerators
	GpuAccelerators *Accelerators `form:"gpu_accelerators,omitempty" json:"gpu_accelerators,omitempty" yaml:"gpu_accelerators,omitempty" xml:"gpu_accelerators,omitempty"`
	// Instance size
	InstanceSize *int `form:"instance_size,omitempty" json:"instance_size,omitempty" yaml:"instance_size,omitempty" xml:"instance_size,omitempty"`
	// GCE Machine Type
	MachineType string `form:"machine_type" json:"machine_type" yaml:"machine_type" xml:"machine_type"`
	// Name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// Use preemptible VMs
	Preemptible *bool `form:"preemptible,omitempty" json:"preemptible,omitempty" yaml:"preemptible,omitempty" xml:"preemptible,omitempty"`
	// GCP Project ID
	ProjectID string `form:"project_id" json:"project_id" yaml:"project_id" xml:"project_id"`
	// Startup script
	StartupScript *string `form:"startup_script,omitempty" json:"startup_script,omitempty" yaml:"startup_script,omitempty" xml:"startup_script,omitempty"`
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// Token Consumption
	TokenConsumption *int `form:"token_consumption,omitempty" json:"token_consumption,omitempty" yaml:"token_consumption,omitempty" xml:"token_consumption,omitempty"`
	// GCP zone
	Zone string `form:"zone" json:"zone" yaml:"zone" xml:"zone"`
}

// Validate validates the InstanceGroup type instance.
func (ut *InstanceGroup) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.ProjectID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "project_id"))
	}
	if ut.Zone == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "zone"))
	}
	if ut.BootDisk == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "boot_disk"))
	}
	if ut.MachineType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "machine_type"))
	}
	if ut.BootDisk != nil {
		if err2 := ut.BootDisk.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.GpuAccelerators != nil {
		if err2 := ut.GpuAccelerators.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Status != nil {
		if !(*ut.Status == "constructing" || *ut.Status == "constructing_error" || *ut.Status == "constructed" || *ut.Status == "resizing" || *ut.Status == "destructing" || *ut.Status == "destructing_error" || *ut.Status == "destructed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.status`, *ut.Status, []interface{}{"constructing", "constructing_error", "constructed", "resizing", "destructing", "destructing_error", "destructed"}))
		}
	}
	return
}

// pipelineVMDisk user type.
type pipelineVMDisk struct {
	// Disk size
	DiskSizeGb *int `form:"disk_size_gb,omitempty" json:"disk_size_gb,omitempty" yaml:"disk_size_gb,omitempty" xml:"disk_size_gb,omitempty"`
	// Disk type
	DiskType *string `form:"disk_type,omitempty" json:"disk_type,omitempty" yaml:"disk_type,omitempty" xml:"disk_type,omitempty"`
	// Source image
	SourceImage *string `form:"source_image,omitempty" json:"source_image,omitempty" yaml:"source_image,omitempty" xml:"source_image,omitempty"`
}

// Finalize sets the default values for pipelineVMDisk type instance.
func (ut *pipelineVMDisk) Finalize() {
	var defaultDiskSizeGb = 0
	if ut.DiskSizeGb == nil {
		ut.DiskSizeGb = &defaultDiskSizeGb
	}
	var defaultDiskType = ""
	if ut.DiskType == nil {
		ut.DiskType = &defaultDiskType
	}
	var defaultSourceImage = ""
	if ut.SourceImage == nil {
		ut.SourceImage = &defaultSourceImage
	}
}

// Validate validates the pipelineVMDisk type instance.
func (ut *pipelineVMDisk) Validate() (err error) {
	if ut.SourceImage == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "source_image"))
	}
	return
}

// Publicize creates PipelineVMDisk from pipelineVMDisk
func (ut *pipelineVMDisk) Publicize() *PipelineVMDisk {
	var pub PipelineVMDisk
	if ut.DiskSizeGb != nil {
		pub.DiskSizeGb = *ut.DiskSizeGb
	}
	if ut.DiskType != nil {
		pub.DiskType = *ut.DiskType
	}
	if ut.SourceImage != nil {
		pub.SourceImage = *ut.SourceImage
	}
	return &pub
}

// PipelineVMDisk user type.
type PipelineVMDisk struct {
	// Disk size
	DiskSizeGb int `form:"disk_size_gb" json:"disk_size_gb" yaml:"disk_size_gb" xml:"disk_size_gb"`
	// Disk type
	DiskType string `form:"disk_type" json:"disk_type" yaml:"disk_type" xml:"disk_type"`
	// Source image
	SourceImage string `form:"source_image" json:"source_image" yaml:"source_image" xml:"source_image"`
}

// Validate validates the PipelineVMDisk type instance.
func (ut *PipelineVMDisk) Validate() (err error) {
	if ut.SourceImage == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "source_image"))
	}
	return
}

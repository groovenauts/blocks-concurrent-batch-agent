// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": PipelineJob Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ActivatePipelineJobPath computes a request path to the activate action of PipelineJob.
func ActivatePipelineJobPath(orgID string, name string, id string) string {
	param0 := orgID
	param1 := name
	param2 := id

	return fmt.Sprintf("/orgs/%s/pipelines/%s/jobs/%s/activate", param0, param1, param2)
}

// Activate job
func (c *Client) ActivatePipelineJob(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewActivatePipelineJobRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewActivatePipelineJobRequest create the request corresponding to the activate action endpoint of the PipelineJob resource.
func (c *Client) NewActivatePipelineJobRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// CreatePipelineJobPath computes a request path to the create action of PipelineJob.
func CreatePipelineJobPath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipelines/%s/jobs", param0, param1)
}

// create
func (c *Client) CreatePipelineJob(ctx context.Context, path string, payload *JobPayload, active *string, contentType string) (*http.Response, error) {
	req, err := c.NewCreatePipelineJobRequest(ctx, path, payload, active, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreatePipelineJobRequest create the request corresponding to the create action endpoint of the PipelineJob resource.
func (c *Client) NewCreatePipelineJobRequest(ctx context.Context, path string, payload *JobPayload, active *string, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if active != nil {
		values.Set("active", *active)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeletePipelineJobPath computes a request path to the delete action of PipelineJob.
func DeletePipelineJobPath(orgID string, name string, id string) string {
	param0 := orgID
	param1 := name
	param2 := id

	return fmt.Sprintf("/orgs/%s/pipelines/%s/jobs/%s", param0, param1, param2)
}

// delete
func (c *Client) DeletePipelineJob(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeletePipelineJobRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeletePipelineJobRequest create the request corresponding to the delete action endpoint of the PipelineJob resource.
func (c *Client) NewDeletePipelineJobRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// InactivatePipelineJobPath computes a request path to the inactivate action of PipelineJob.
func InactivatePipelineJobPath(orgID string, name string, id string) string {
	param0 := orgID
	param1 := name
	param2 := id

	return fmt.Sprintf("/orgs/%s/pipelines/%s/jobs/%s/inactivate", param0, param1, param2)
}

// Inactivate job
func (c *Client) InactivatePipelineJob(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewInactivatePipelineJobRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewInactivatePipelineJobRequest create the request corresponding to the inactivate action endpoint of the PipelineJob resource.
func (c *Client) NewInactivatePipelineJobRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// OutputPipelineJobPath computes a request path to the output action of PipelineJob.
func OutputPipelineJobPath(orgID string, name string, id string) string {
	param0 := orgID
	param1 := name
	param2 := id

	return fmt.Sprintf("/orgs/%s/pipelines/%s/jobs/%s/output", param0, param1, param2)
}

// output
func (c *Client) OutputPipelineJob(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewOutputPipelineJobRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewOutputPipelineJobRequest create the request corresponding to the output action endpoint of the PipelineJob resource.
func (c *Client) NewOutputPipelineJobRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowPipelineJobPath computes a request path to the show action of PipelineJob.
func ShowPipelineJobPath(orgID string, name string, id string) string {
	param0 := orgID
	param1 := name
	param2 := id

	return fmt.Sprintf("/orgs/%s/pipelines/%s/jobs/%s", param0, param1, param2)
}

// show
func (c *Client) ShowPipelineJob(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPipelineJobRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPipelineJobRequest create the request corresponding to the show action endpoint of the PipelineJob resource.
func (c *Client) NewShowPipelineJobRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

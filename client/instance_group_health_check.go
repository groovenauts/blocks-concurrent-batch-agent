// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": InstanceGroupHealthCheck Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ExecuteInstanceGroupHealthCheckPath computes a request path to the execute action of InstanceGroupHealthCheck.
func ExecuteInstanceGroupHealthCheckPath(name string, id string) string {
	param0 := name
	param1 := id

	return fmt.Sprintf("/instance_groups/%s/health_checks/%s", param0, param1)
}

// Execute health check
func (c *Client) ExecuteInstanceGroupHealthCheck(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewExecuteInstanceGroupHealthCheckRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewExecuteInstanceGroupHealthCheckRequest create the request corresponding to the execute action endpoint of the InstanceGroupHealthCheck resource.
func (c *Client) NewExecuteInstanceGroupHealthCheckRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

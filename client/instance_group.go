// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": InstanceGroup Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateInstanceGroupPath computes a request path to the create action of InstanceGroup.
func CreateInstanceGroupPath() string {

	return fmt.Sprintf("/instance_groups")
}

// create
func (c *Client) CreateInstanceGroup(ctx context.Context, path string, payload *InstanceGroupPayload, orgID string, contentType string) (*http.Response, error) {
	req, err := c.NewCreateInstanceGroupRequest(ctx, path, payload, orgID, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateInstanceGroupRequest create the request corresponding to the create action endpoint of the InstanceGroup resource.
func (c *Client) NewCreateInstanceGroupRequest(ctx context.Context, path string, payload *InstanceGroupPayload, orgID string, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("org_id", orgID)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteInstanceGroupPath computes a request path to the delete action of InstanceGroup.
func DeleteInstanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s", param0)
}

// delete
func (c *Client) DeleteInstanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteInstanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteInstanceGroupRequest create the request corresponding to the delete action endpoint of the InstanceGroup resource.
func (c *Client) NewDeleteInstanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DestructInstanceGroupPath computes a request path to the destruct action of InstanceGroup.
func DestructInstanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s/destruct", param0)
}

// Destruct
func (c *Client) DestructInstanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDestructInstanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDestructInstanceGroupRequest create the request corresponding to the destruct action endpoint of the InstanceGroup resource.
func (c *Client) NewDestructInstanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListInstanceGroupPath computes a request path to the list action of InstanceGroup.
func ListInstanceGroupPath() string {

	return fmt.Sprintf("/instance_groups")
}

// list
func (c *Client) ListInstanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListInstanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListInstanceGroupRequest create the request corresponding to the list action endpoint of the InstanceGroup resource.
func (c *Client) NewListInstanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ResizeInstanceGroupPath computes a request path to the resize action of InstanceGroup.
func ResizeInstanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s/resize", param0)
}

// Resize
func (c *Client) ResizeInstanceGroup(ctx context.Context, path string, newSize int) (*http.Response, error) {
	req, err := c.NewResizeInstanceGroupRequest(ctx, path, newSize)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewResizeInstanceGroupRequest create the request corresponding to the resize action endpoint of the InstanceGroup resource.
func (c *Client) NewResizeInstanceGroupRequest(ctx context.Context, path string, newSize int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp41 := strconv.Itoa(newSize)
	values.Set("new_size", tmp41)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowInstanceGroupPath computes a request path to the show action of InstanceGroup.
func ShowInstanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s", param0)
}

// show
func (c *Client) ShowInstanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowInstanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowInstanceGroupRequest create the request corresponding to the show action endpoint of the InstanceGroup resource.
func (c *Client) NewShowInstanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

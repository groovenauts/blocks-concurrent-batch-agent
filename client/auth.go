// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Auth Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateAuthPath computes a request path to the create action of Auth.
func CreateAuthPath(id string) string {
	param0 := id

	return fmt.Sprintf("/admin/organizations/%s/auths", param0)
}

// create
func (c *Client) CreateAuth(ctx context.Context, path string, orgID *string) (*http.Response, error) {
	req, err := c.NewCreateAuthRequest(ctx, path, orgID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateAuthRequest create the request corresponding to the create action endpoint of the Auth resource.
func (c *Client) NewCreateAuthRequest(ctx context.Context, path string, orgID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if orgID != nil {
		values.Set("org_id", *orgID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteAuthPath computes a request path to the delete action of Auth.
func DeleteAuthPath(id string, authID string) string {
	param0 := id
	param1 := authID

	return fmt.Sprintf("/admin/organizations/%s/auths/%s", param0, param1)
}

// delete
func (c *Client) DeleteAuth(ctx context.Context, path string, orgID *string) (*http.Response, error) {
	req, err := c.NewDeleteAuthRequest(ctx, path, orgID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAuthRequest create the request corresponding to the delete action endpoint of the Auth resource.
func (c *Client) NewDeleteAuthRequest(ctx context.Context, path string, orgID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if orgID != nil {
		values.Set("org_id", *orgID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListAuthPath computes a request path to the list action of Auth.
func ListAuthPath(id string) string {
	param0 := id

	return fmt.Sprintf("/admin/organizations/%s/auths", param0)
}

// list
func (c *Client) ListAuth(ctx context.Context, path string, orgID *string) (*http.Response, error) {
	req, err := c.NewListAuthRequest(ctx, path, orgID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAuthRequest create the request corresponding to the list action endpoint of the Auth resource.
func (c *Client) NewListAuthRequest(ctx context.Context, path string, orgID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if orgID != nil {
		values.Set("org_id", *orgID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

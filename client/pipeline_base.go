// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": PipelineBase Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"time"
)

// ClosePipelineBasePath computes a request path to the close action of PipelineBase.
func ClosePipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s", param0, param1)
}

// Close
func (c *Client) ClosePipelineBase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewClosePipelineBaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewClosePipelineBaseRequest create the request corresponding to the close action endpoint of the PipelineBase resource.
func (c *Client) NewClosePipelineBaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// CreatePipelineBasePath computes a request path to the create action of PipelineBase.
func CreatePipelineBasePath(orgID string) string {
	param0 := orgID

	return fmt.Sprintf("/orgs/%s/pipeline_bases", param0)
}

// create
func (c *Client) CreatePipelineBase(ctx context.Context, path string, payload *PipelineBasePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreatePipelineBaseRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreatePipelineBaseRequest create the request corresponding to the create action endpoint of the PipelineBase resource.
func (c *Client) NewCreatePipelineBaseRequest(ctx context.Context, path string, payload *PipelineBasePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeletePipelineBasePath computes a request path to the delete action of PipelineBase.
func DeletePipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s", param0, param1)
}

// delete
func (c *Client) DeletePipelineBase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeletePipelineBaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeletePipelineBaseRequest create the request corresponding to the delete action endpoint of the PipelineBase resource.
func (c *Client) NewDeletePipelineBaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// HibernationCheckingTaskPipelineBasePath computes a request path to the hibernation_checking_task action of PipelineBase.
func HibernationCheckingTaskPipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s/hibernation_checking_task", param0, param1)
}

// Task to check if it starts hibernation
func (c *Client) HibernationCheckingTaskPipelineBase(ctx context.Context, path string, since time.Time) (*http.Response, error) {
	req, err := c.NewHibernationCheckingTaskPipelineBaseRequest(ctx, path, since)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewHibernationCheckingTaskPipelineBaseRequest create the request corresponding to the hibernation_checking_task action endpoint of the PipelineBase resource.
func (c *Client) NewHibernationCheckingTaskPipelineBaseRequest(ctx context.Context, path string, since time.Time) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp45 := since.Format(time.RFC3339)
	values.Set("since", tmp45)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// HibernationDoneTaskPipelineBasePath computes a request path to the hibernation_done_task action of PipelineBase.
func HibernationDoneTaskPipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s/hibernation_done_task", param0, param1)
}

// Task to accept hibernation(destruction) done notification
func (c *Client) HibernationDoneTaskPipelineBase(ctx context.Context, path string, error *string, operationID *string) (*http.Response, error) {
	req, err := c.NewHibernationDoneTaskPipelineBaseRequest(ctx, path, error, operationID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewHibernationDoneTaskPipelineBaseRequest create the request corresponding to the hibernation_done_task action endpoint of the PipelineBase resource.
func (c *Client) NewHibernationDoneTaskPipelineBaseRequest(ctx context.Context, path string, error *string, operationID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if error != nil {
		values.Set("error", *error)
	}
	if operationID != nil {
		values.Set("operation_id", *operationID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListPipelineBasePath computes a request path to the list action of PipelineBase.
func ListPipelineBasePath(orgID string) string {
	param0 := orgID

	return fmt.Sprintf("/orgs/%s/pipeline_bases", param0)
}

// list
func (c *Client) ListPipelineBase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPipelineBaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPipelineBaseRequest create the request corresponding to the list action endpoint of the PipelineBase resource.
func (c *Client) NewListPipelineBaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// PullTaskPipelineBasePath computes a request path to the pull_task action of PipelineBase.
func PullTaskPipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s/pull_task", param0, param1)
}

// Task to pull progress messages
func (c *Client) PullTaskPipelineBase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewPullTaskPipelineBaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPullTaskPipelineBaseRequest create the request corresponding to the pull_task action endpoint of the PipelineBase resource.
func (c *Client) NewPullTaskPipelineBaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowPipelineBasePath computes a request path to the show action of PipelineBase.
func ShowPipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s", param0, param1)
}

// show
func (c *Client) ShowPipelineBase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPipelineBaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPipelineBaseRequest create the request corresponding to the show action endpoint of the PipelineBase resource.
func (c *Client) NewShowPipelineBaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// WakeupDoneTaskPipelineBasePath computes a request path to the wakeup_done_task action of PipelineBase.
func WakeupDoneTaskPipelineBasePath(orgID string, name string) string {
	param0 := orgID
	param1 := name

	return fmt.Sprintf("/orgs/%s/pipeline_bases/%s/wakeup_done_task", param0, param1)
}

// Task to accept wakeup(construction) done notification
func (c *Client) WakeupDoneTaskPipelineBase(ctx context.Context, path string, error *string, operationID *string) (*http.Response, error) {
	req, err := c.NewWakeupDoneTaskPipelineBaseRequest(ctx, path, error, operationID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewWakeupDoneTaskPipelineBaseRequest create the request corresponding to the wakeup_done_task action endpoint of the PipelineBase resource.
func (c *Client) NewWakeupDoneTaskPipelineBaseRequest(ctx context.Context, path string, error *string, operationID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if error != nil {
		values.Set("error", *error)
	}
	if operationID != nil {
		values.Set("operation_id", *operationID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": IntanceGroup Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateIntanceGroupPath computes a request path to the create action of IntanceGroup.
func CreateIntanceGroupPath() string {

	return fmt.Sprintf("/instance_groups")
}

// create
func (c *Client) CreateIntanceGroup(ctx context.Context, path string, payload *InstanceGroup, contentType string) (*http.Response, error) {
	req, err := c.NewCreateIntanceGroupRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateIntanceGroupRequest create the request corresponding to the create action endpoint of the IntanceGroup resource.
func (c *Client) NewCreateIntanceGroupRequest(ctx context.Context, path string, payload *InstanceGroup, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteIntanceGroupPath computes a request path to the delete action of IntanceGroup.
func DeleteIntanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s", param0)
}

// delete
func (c *Client) DeleteIntanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteIntanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteIntanceGroupRequest create the request corresponding to the delete action endpoint of the IntanceGroup resource.
func (c *Client) NewDeleteIntanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DestructIntanceGroupPath computes a request path to the destruct action of IntanceGroup.
func DestructIntanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s/restruct", param0)
}

// Destruct
func (c *Client) DestructIntanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDestructIntanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDestructIntanceGroupRequest create the request corresponding to the destruct action endpoint of the IntanceGroup resource.
func (c *Client) NewDestructIntanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListIntanceGroupPath computes a request path to the list action of IntanceGroup.
func ListIntanceGroupPath() string {

	return fmt.Sprintf("/instance_groups")
}

// list
func (c *Client) ListIntanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListIntanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIntanceGroupRequest create the request corresponding to the list action endpoint of the IntanceGroup resource.
func (c *Client) NewListIntanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ResizeIntanceGroupPayload is the IntanceGroup resize action payload.
type ResizeIntanceGroupPayload struct {
	// New Instance Size
	NewSize int `form:"new_size" json:"new_size" yaml:"new_size" xml:"new_size"`
}

// ResizeIntanceGroupPath computes a request path to the resize action of IntanceGroup.
func ResizeIntanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s/resize", param0)
}

// Resize
func (c *Client) ResizeIntanceGroup(ctx context.Context, path string, payload *ResizeIntanceGroupPayload, contentType string) (*http.Response, error) {
	req, err := c.NewResizeIntanceGroupRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewResizeIntanceGroupRequest create the request corresponding to the resize action endpoint of the IntanceGroup resource.
func (c *Client) NewResizeIntanceGroupRequest(ctx context.Context, path string, payload *ResizeIntanceGroupPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowIntanceGroupPath computes a request path to the show action of IntanceGroup.
func ShowIntanceGroupPath(id string) string {
	param0 := id

	return fmt.Sprintf("/instance_groups/%s", param0)
}

// show
func (c *Client) ShowIntanceGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowIntanceGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowIntanceGroupRequest create the request corresponding to the show action endpoint of the IntanceGroup resource.
func (c *Client) NewShowIntanceGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Organization Resource Client
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateOrganizationPath computes a request path to the create action of Organization.
func CreateOrganizationPath() string {

	return fmt.Sprintf("/admin/organizations")
}

// create
func (c *Client) CreateOrganization(ctx context.Context, path string, payload *OrganizationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateOrganizationRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateOrganizationRequest create the request corresponding to the create action endpoint of the Organization resource.
func (c *Client) NewCreateOrganizationRequest(ctx context.Context, path string, payload *OrganizationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteOrganizationPath computes a request path to the delete action of Organization.
func DeleteOrganizationPath(id string) string {
	param0 := id

	return fmt.Sprintf("/admin/organizations/%s", param0)
}

// delete
func (c *Client) DeleteOrganization(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteOrganizationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteOrganizationRequest create the request corresponding to the delete action endpoint of the Organization resource.
func (c *Client) NewDeleteOrganizationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListOrganizationPath computes a request path to the list action of Organization.
func ListOrganizationPath() string {

	return fmt.Sprintf("/admin/organizations")
}

// list
func (c *Client) ListOrganization(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListOrganizationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListOrganizationRequest create the request corresponding to the list action endpoint of the Organization resource.
func (c *Client) NewListOrganizationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowOrganizationPath computes a request path to the show action of Organization.
func ShowOrganizationPath(id string) string {
	param0 := id

	return fmt.Sprintf("/admin/organizations/%s", param0)
}

// show
func (c *Client) ShowOrganization(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowOrganizationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowOrganizationRequest create the request corresponding to the show action endpoint of the Organization resource.
func (c *Client) NewShowOrganizationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

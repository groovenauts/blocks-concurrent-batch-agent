// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/groovenauts/blocks-concurrent-batch-server/design
// --out=$(GOPATH)/src/github.com/groovenauts/blocks-concurrent-batch-server
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/groovenauts/blocks-concurrent-batch-server/client"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// WatchInstanceGroupConstructingTaskCommand is the command line data structure for the watch action of InstanceGroupConstructingTask
	WatchInstanceGroupConstructingTaskCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// WatchInstanceGroupDestructingTaskCommand is the command line data structure for the watch action of InstanceGroupDestructingTask
	WatchInstanceGroupDestructingTaskCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// WatchInstanceGroupResizingTaskCommand is the command line data structure for the watch action of InstanceGroupResizingTask
	WatchInstanceGroupResizingTaskCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// CreateIntanceGroupCommand is the command line data structure for the create action of IntanceGroup
	CreateIntanceGroupCommand struct {
		Payload     string
		ContentType string
		// Organization ID
		OrgID       string
		PrettyPrint bool
	}

	// DeleteIntanceGroupCommand is the command line data structure for the delete action of IntanceGroup
	DeleteIntanceGroupCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// DestructIntanceGroupCommand is the command line data structure for the destruct action of IntanceGroup
	DestructIntanceGroupCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// ListIntanceGroupCommand is the command line data structure for the list action of IntanceGroup
	ListIntanceGroupCommand struct {
		PrettyPrint bool
	}

	// ResizeIntanceGroupCommand is the command line data structure for the resize action of IntanceGroup
	ResizeIntanceGroupCommand struct {
		Payload     string
		ContentType string
		// ID
		ID          string
		PrettyPrint bool
	}

	// ShowIntanceGroupCommand is the command line data structure for the show action of IntanceGroup
	ShowIntanceGroupCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// ActivateJobCommand is the command line data structure for the activate action of Job
	ActivateJobCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// CreateJobCommand is the command line data structure for the create action of Job
	CreateJobCommand struct {
		Payload     string
		ContentType string
		// Set true to activate soon
		Active string
		// Pipeline Base ID
		PipelineBaseID string
		// Pipeline ID
		PipelineID  string
		PrettyPrint bool
	}

	// DeleteJobCommand is the command line data structure for the delete action of Job
	DeleteJobCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// InactivateJobCommand is the command line data structure for the inactivate action of Job
	InactivateJobCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// PublishingTaskJobCommand is the command line data structure for the publishing_task action of Job
	PublishingTaskJobCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// ShowJobCommand is the command line data structure for the show action of Job
	ShowJobCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// CreatePipelineCommand is the command line data structure for the create action of Pipeline
	CreatePipelineCommand struct {
		Payload     string
		ContentType string
		// Organization ID
		OrgID       string
		PrettyPrint bool
	}

	// CurrentPipelineCommand is the command line data structure for the current action of Pipeline
	CurrentPipelineCommand struct {
		// ID
		ID             string
		PipelineBaseID string
		PrettyPrint    bool
	}

	// DeletePipelineCommand is the command line data structure for the delete action of Pipeline
	DeletePipelineCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// ListPipelineCommand is the command line data structure for the list action of Pipeline
	ListPipelineCommand struct {
		// Organization ID
		OrgID       string
		PrettyPrint bool
	}

	// PreparingFinalizeTaskPipelineCommand is the command line data structure for the preparing_finalize_task action of Pipeline
	PreparingFinalizeTaskPipelineCommand struct {
		// ID
		ID          string
		Error       string
		OperationID string
		PrettyPrint bool
	}

	// ShowPipelineCommand is the command line data structure for the show action of Pipeline
	ShowPipelineCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// StopPipelineCommand is the command line data structure for the stop action of Pipeline
	StopPipelineCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// ClosePipelineBaseCommand is the command line data structure for the close action of PipelineBase
	ClosePipelineBaseCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// CreatePipelineBaseCommand is the command line data structure for the create action of PipelineBase
	CreatePipelineBaseCommand struct {
		Payload     string
		ContentType string
		// Organization ID
		OrgID       string
		PrettyPrint bool
	}

	// DeletePipelineBaseCommand is the command line data structure for the delete action of PipelineBase
	DeletePipelineBaseCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// HibernationCheckingFinalizeTaskPipelineBaseCommand is the command line data structure for the hibernation_checking_finalize_task action of PipelineBase
	HibernationCheckingFinalizeTaskPipelineBaseCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// HibernationGoingFinalizeTaskPipelineBaseCommand is the command line data structure for the hibernation_going_finalize_task action of PipelineBase
	HibernationGoingFinalizeTaskPipelineBaseCommand struct {
		// ID
		ID          string
		Error       string
		OperationID string
		PrettyPrint bool
	}

	// ListPipelineBaseCommand is the command line data structure for the list action of PipelineBase
	ListPipelineBaseCommand struct {
		// Organization ID
		OrgID       string
		PrettyPrint bool
	}

	// PullTaskPipelineBaseCommand is the command line data structure for the pull_task action of PipelineBase
	PullTaskPipelineBaseCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// ShowPipelineBaseCommand is the command line data structure for the show action of PipelineBase
	ShowPipelineBaseCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// WakingFinalizeTaskPipelineBaseCommand is the command line data structure for the waking_finalize_task action of PipelineBase
	WakingFinalizeTaskPipelineBaseCommand struct {
		// ID
		ID          string
		Error       string
		OperationID string
		PrettyPrint bool
	}

	// WatchPipelineBaseClosingTaskCommand is the command line data structure for the watch action of PipelineBaseClosingTask
	WatchPipelineBaseClosingTaskCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// WatchPipelineBaseOpeningTaskCommand is the command line data structure for the watch action of PipelineBaseOpeningTask
	WatchPipelineBaseOpeningTaskCommand struct {
		// ID
		ID          string
		PrettyPrint bool
	}

	// CreateDummyAuthsCommand is the command line data structure for the create action of dummy-auths
	CreateDummyAuthsCommand struct {
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "activate",
		Short: `Activate job`,
	}
	tmp1 := new(ActivateJobCommand)
	sub = &cobra.Command{
		Use:   `job ["/jobs/ID/activate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "close",
		Short: `Close`,
	}
	tmp2 := new(ClosePipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp3 := new(CreateIntanceGroupCommand)
	sub = &cobra.Command{
		Use:   `intance-group ["/instance_groups"]`,
		Short: ``,
		Long: `

Payload example:

{
   "boot_disk": {
      "disk_size_gb": 50,
      "disk_type": "projects/dummy-proj-999/zones/asia-east1-a/diskTypes/pd-standard",
      "source_image": "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/family/cos-stable"
   },
   "deployment_name": "Eos id culpa quo.",
   "gpu_accelerators": {
      "count": 2,
      "type": "nvidia-tesla-p100"
   },
   "instance_size": 3,
   "machine_type": "f1-micro",
   "name": "pipeline1-123-ig-456",
   "pipeline_base_id": "bd2d5ee3-d8be-4024-85a7-334dee9c1c88",
   "preemptible": true,
   "project_id": "dummy-proj-999",
   "startup_script": "Beatae quod.",
   "token_consumption": 2,
   "zone": "us-central1-f"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(CreateJobCommand)
	sub = &cobra.Command{
		Use:   `job ["/jobs"]`,
		Short: ``,
		Long: `

Payload example:

{
   "id_by_client": "Ducimus aspernatur perspiciatis aperiam.",
   "message": {
      "attributes": {
         "Suscipit amet cum.": "Voluptatem et aspernatur et."
      },
      "data": "Aut et similique consectetur corporis aut ratione."
   }
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp5 := new(CreatePipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines"]`,
		Short: ``,
		Long: `

Payload example:

{
   "container": {
      "command": "bundle exec magellan-gcs-proxy echo %{download_files.0} %{downloads_dir} %{uploads_dir}",
      "name": "Animi veritatis nisi veritatis.",
      "options": "--restart=on-failure:3",
      "size": 2,
      "stackdriver_agent": true
   },
   "hibernation_delay": 7797336613342039318,
   "instance_group": {
      "boot_disk": {
         "disk_size_gb": 50,
         "disk_type": "projects/dummy-proj-999/zones/asia-east1-a/diskTypes/pd-standard",
         "source_image": "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/family/cos-stable"
      },
      "deployment_name": "Sit a magnam mollitia laboriosam iure labore.",
      "gpu_accelerators": {
         "count": 2,
         "type": "nvidia-tesla-p100"
      },
      "instance_size": 3,
      "machine_type": "f1-micro",
      "preemptible": false,
      "project_id": "dummy-proj-999",
      "startup_script": "Possimus optio et voluptas quia suscipit autem.",
      "token_consumption": 2,
      "zone": "us-central1-f"
   },
   "name": "pipeline1"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(CreatePipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases"]`,
		Short: ``,
		Long: `

Payload example:

{
   "container": {
      "command": "bundle exec magellan-gcs-proxy echo %{download_files.0} %{downloads_dir} %{uploads_dir}",
      "name": "Animi veritatis nisi veritatis.",
      "options": "--restart=on-failure:3",
      "size": 2,
      "stackdriver_agent": true
   },
   "hibernation_delay": 7212691683500624276,
   "instance_group": {
      "boot_disk": {
         "disk_size_gb": 50,
         "disk_type": "projects/dummy-proj-999/zones/asia-east1-a/diskTypes/pd-standard",
         "source_image": "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/family/cos-stable"
      },
      "deployment_name": "Sit a magnam mollitia laboriosam iure labore.",
      "gpu_accelerators": {
         "count": 2,
         "type": "nvidia-tesla-p100"
      },
      "instance_size": 3,
      "machine_type": "f1-micro",
      "preemptible": false,
      "project_id": "dummy-proj-999",
      "startup_script": "Possimus optio et voluptas quia suscipit autem.",
      "token_consumption": 2,
      "zone": "us-central1-f"
   },
   "name": "pipeline1-123"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(CreateDummyAuthsCommand)
	sub = &cobra.Command{
		Use:   `dummy-auths ["/dummy-auths"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "current",
		Short: `Update current pipeline base`,
	}
	tmp8 := new(CurrentPipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines/ID/current"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp9 := new(DeleteIntanceGroupCommand)
	sub = &cobra.Command{
		Use:   `intance-group ["/instance_groups/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(DeleteJobCommand)
	sub = &cobra.Command{
		Use:   `job ["/jobs/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp11 := new(DeletePipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp12 := new(DeletePipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "destruct",
		Short: `Destruct`,
	}
	tmp13 := new(DestructIntanceGroupCommand)
	sub = &cobra.Command{
		Use:   `intance-group ["/instance_groups/ID/restruct"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "hibernation-checking-finalize-task",
		Short: `Task to finalize hibernation_checking status`,
	}
	tmp14 := new(HibernationCheckingFinalizeTaskPipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID/hibernation_checking_finalize_task"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "hibernation-going-finalize-task",
		Short: `Task to finalize hibernation_going status`,
	}
	tmp15 := new(HibernationGoingFinalizeTaskPipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID/hibernation_going_finalize_task"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "inactivate",
		Short: `Inactivate job`,
	}
	tmp16 := new(InactivateJobCommand)
	sub = &cobra.Command{
		Use:   `job ["/jobs/ID/inactivate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp17 := new(ListIntanceGroupCommand)
	sub = &cobra.Command{
		Use:   `intance-group ["/instance_groups"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp18 := new(ListPipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp19 := new(ListPipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "preparing-finalize-task",
		Short: `Task to finalize current_preparing or next_preparing status`,
	}
	tmp20 := new(PreparingFinalizeTaskPipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines/ID/preparing_finalize_task"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "publishing-task",
		Short: `Publishing job task`,
	}
	tmp21 := new(PublishingTaskJobCommand)
	sub = &cobra.Command{
		Use:   `job ["/jobs/ID/publishing_task"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "pull-task",
		Short: `Task to pull progress messages`,
	}
	tmp22 := new(PullTaskPipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID/pull_task"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "resize",
		Short: `Resize`,
	}
	tmp23 := new(ResizeIntanceGroupCommand)
	sub = &cobra.Command{
		Use:   `intance-group ["/instance_groups/ID/resize"]`,
		Short: ``,
		Long: `

Payload example:

{
   "new_size": 4251147645571147493
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp24 := new(ShowIntanceGroupCommand)
	sub = &cobra.Command{
		Use:   `intance-group ["/instance_groups/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp25 := new(ShowJobCommand)
	sub = &cobra.Command{
		Use:   `job ["/jobs/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp26 := new(ShowPipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp27 := new(ShowPipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "stop",
		Short: `Stop pipeline`,
	}
	tmp28 := new(StopPipelineCommand)
	sub = &cobra.Command{
		Use:   `pipeline ["/pipelines/ID/stop"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "waking-finalize-task",
		Short: `Task to finalize waking status`,
	}
	tmp29 := new(WakingFinalizeTaskPipelineBaseCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base ["/pipeline_bases/ID/waking_finalize_task"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "watch",
		Short: `watch action`,
	}
	tmp30 := new(WatchInstanceGroupConstructingTaskCommand)
	sub = &cobra.Command{
		Use:   `instance-group-constructing-task ["/constructing_tasks/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp31 := new(WatchInstanceGroupDestructingTaskCommand)
	sub = &cobra.Command{
		Use:   `instance-group-destructing-task ["/destructing_tasks/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp32 := new(WatchInstanceGroupResizingTaskCommand)
	sub = &cobra.Command{
		Use:   `instance-group-resizing-task ["/resizing_tasks/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp33 := new(WatchPipelineBaseClosingTaskCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base-closing-task ["/closing_tasks/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(WatchPipelineBaseOpeningTaskCommand)
	sub = &cobra.Command{
		Use:   `pipeline-base-opening-task ["/opening_tasks/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/swagger/") {
		fnd = c.DownloadSwagger
		rpath = rpath[9:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the WatchInstanceGroupConstructingTaskCommand command.
func (cmd *WatchInstanceGroupConstructingTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/constructing_tasks/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.WatchInstanceGroupConstructingTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchInstanceGroupConstructingTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the WatchInstanceGroupDestructingTaskCommand command.
func (cmd *WatchInstanceGroupDestructingTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/destructing_tasks/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.WatchInstanceGroupDestructingTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchInstanceGroupDestructingTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the WatchInstanceGroupResizingTaskCommand command.
func (cmd *WatchInstanceGroupResizingTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/resizing_tasks/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.WatchInstanceGroupResizingTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchInstanceGroupResizingTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the CreateIntanceGroupCommand command.
func (cmd *CreateIntanceGroupCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/instance_groups"
	}
	var payload client.InstanceGroupPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateIntanceGroup(ctx, path, &payload, cmd.OrgID, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateIntanceGroupCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var orgID string
	cc.Flags().StringVar(&cmd.OrgID, "org_id", orgID, `Organization ID`)
}

// Run makes the HTTP request corresponding to the DeleteIntanceGroupCommand command.
func (cmd *DeleteIntanceGroupCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/instance_groups/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteIntanceGroup(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteIntanceGroupCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the DestructIntanceGroupCommand command.
func (cmd *DestructIntanceGroupCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/instance_groups/%v/restruct", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DestructIntanceGroup(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DestructIntanceGroupCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ListIntanceGroupCommand command.
func (cmd *ListIntanceGroupCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/instance_groups"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIntanceGroup(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIntanceGroupCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ResizeIntanceGroupCommand command.
func (cmd *ResizeIntanceGroupCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/instance_groups/%v/resize", url.QueryEscape(cmd.ID))
	}
	var payload client.ResizeIntanceGroupPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ResizeIntanceGroup(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ResizeIntanceGroupCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ShowIntanceGroupCommand command.
func (cmd *ShowIntanceGroupCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/instance_groups/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowIntanceGroup(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowIntanceGroupCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ActivateJobCommand command.
func (cmd *ActivateJobCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/jobs/%v/activate", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ActivateJob(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ActivateJobCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the CreateJobCommand command.
func (cmd *CreateJobCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/jobs"
	}
	var payload client.JobPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateJob(ctx, path, &payload, stringFlagVal("active", cmd.Active), stringFlagVal("pipeline_base_id", cmd.PipelineBaseID), stringFlagVal("pipeline_id", cmd.PipelineID), cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateJobCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var active string
	cc.Flags().StringVar(&cmd.Active, "active", active, `Set true to activate soon`)
	var pipelineBaseID string
	cc.Flags().StringVar(&cmd.PipelineBaseID, "pipeline_base_id", pipelineBaseID, `Pipeline Base ID`)
	var pipelineID string
	cc.Flags().StringVar(&cmd.PipelineID, "pipeline_id", pipelineID, `Pipeline ID`)
}

// Run makes the HTTP request corresponding to the DeleteJobCommand command.
func (cmd *DeleteJobCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/jobs/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteJob(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteJobCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the InactivateJobCommand command.
func (cmd *InactivateJobCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/jobs/%v/inactivate", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.InactivateJob(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *InactivateJobCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the PublishingTaskJobCommand command.
func (cmd *PublishingTaskJobCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/jobs/%v/publishing_task", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PublishingTaskJob(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PublishingTaskJobCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ShowJobCommand command.
func (cmd *ShowJobCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/jobs/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowJob(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowJobCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the CreatePipelineCommand command.
func (cmd *CreatePipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/pipelines"
	}
	var payload client.PipelinePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreatePipeline(ctx, path, &payload, cmd.OrgID, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var orgID string
	cc.Flags().StringVar(&cmd.OrgID, "org_id", orgID, `Organization ID`)
}

// Run makes the HTTP request corresponding to the CurrentPipelineCommand command.
func (cmd *CurrentPipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipelines/%v/current", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CurrentPipeline(ctx, path, cmd.PipelineBaseID)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CurrentPipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
	var pipelineBaseID string
	cc.Flags().StringVar(&cmd.PipelineBaseID, "pipeline_base_id", pipelineBaseID, ``)
}

// Run makes the HTTP request corresponding to the DeletePipelineCommand command.
func (cmd *DeletePipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipelines/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeletePipeline(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeletePipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ListPipelineCommand command.
func (cmd *ListPipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/pipelines"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListPipeline(ctx, path, cmd.OrgID)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var orgID string
	cc.Flags().StringVar(&cmd.OrgID, "org_id", orgID, `Organization ID`)
}

// Run makes the HTTP request corresponding to the PreparingFinalizeTaskPipelineCommand command.
func (cmd *PreparingFinalizeTaskPipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipelines/%v/preparing_finalize_task", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PreparingFinalizeTaskPipeline(ctx, path, stringFlagVal("error", cmd.Error), stringFlagVal("operation_id", cmd.OperationID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PreparingFinalizeTaskPipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
	var error string
	cc.Flags().StringVar(&cmd.Error, "error", error, ``)
	var operationID string
	cc.Flags().StringVar(&cmd.OperationID, "operation_id", operationID, ``)
}

// Run makes the HTTP request corresponding to the ShowPipelineCommand command.
func (cmd *ShowPipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipelines/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowPipeline(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowPipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the StopPipelineCommand command.
func (cmd *StopPipelineCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipelines/%v/stop", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StopPipeline(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StopPipelineCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ClosePipelineBaseCommand command.
func (cmd *ClosePipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ClosePipelineBase(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ClosePipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the CreatePipelineBaseCommand command.
func (cmd *CreatePipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/pipeline_bases"
	}
	var payload client.PipelineBasePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreatePipelineBase(ctx, path, &payload, cmd.OrgID, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var orgID string
	cc.Flags().StringVar(&cmd.OrgID, "org_id", orgID, `Organization ID`)
}

// Run makes the HTTP request corresponding to the DeletePipelineBaseCommand command.
func (cmd *DeletePipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeletePipelineBase(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeletePipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the HibernationCheckingFinalizeTaskPipelineBaseCommand command.
func (cmd *HibernationCheckingFinalizeTaskPipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v/hibernation_checking_finalize_task", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HibernationCheckingFinalizeTaskPipelineBase(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HibernationCheckingFinalizeTaskPipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the HibernationGoingFinalizeTaskPipelineBaseCommand command.
func (cmd *HibernationGoingFinalizeTaskPipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v/hibernation_going_finalize_task", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HibernationGoingFinalizeTaskPipelineBase(ctx, path, stringFlagVal("error", cmd.Error), stringFlagVal("operation_id", cmd.OperationID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HibernationGoingFinalizeTaskPipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
	var error string
	cc.Flags().StringVar(&cmd.Error, "error", error, ``)
	var operationID string
	cc.Flags().StringVar(&cmd.OperationID, "operation_id", operationID, ``)
}

// Run makes the HTTP request corresponding to the ListPipelineBaseCommand command.
func (cmd *ListPipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/pipeline_bases"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListPipelineBase(ctx, path, cmd.OrgID)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var orgID string
	cc.Flags().StringVar(&cmd.OrgID, "org_id", orgID, `Organization ID`)
}

// Run makes the HTTP request corresponding to the PullTaskPipelineBaseCommand command.
func (cmd *PullTaskPipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v/pull_task", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PullTaskPipelineBase(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PullTaskPipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the ShowPipelineBaseCommand command.
func (cmd *ShowPipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowPipelineBase(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowPipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the WakingFinalizeTaskPipelineBaseCommand command.
func (cmd *WakingFinalizeTaskPipelineBaseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/pipeline_bases/%v/waking_finalize_task", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.WakingFinalizeTaskPipelineBase(ctx, path, stringFlagVal("error", cmd.Error), stringFlagVal("operation_id", cmd.OperationID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WakingFinalizeTaskPipelineBaseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
	var error string
	cc.Flags().StringVar(&cmd.Error, "error", error, ``)
	var operationID string
	cc.Flags().StringVar(&cmd.OperationID, "operation_id", operationID, ``)
}

// Run makes the HTTP request corresponding to the WatchPipelineBaseClosingTaskCommand command.
func (cmd *WatchPipelineBaseClosingTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/closing_tasks/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.WatchPipelineBaseClosingTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchPipelineBaseClosingTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the WatchPipelineBaseOpeningTaskCommand command.
func (cmd *WatchPipelineBaseOpeningTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/opening_tasks/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.WatchPipelineBaseOpeningTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchPipelineBaseOpeningTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID`)
}

// Run makes the HTTP request corresponding to the CreateDummyAuthsCommand command.
func (cmd *CreateDummyAuthsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/dummy-auths"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateDummyAuths(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateDummyAuthsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}
